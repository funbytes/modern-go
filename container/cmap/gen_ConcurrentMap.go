// Code generated by gotemplate. DO NOT EDIT.

package cmap

import (
	"sync"
)

// A thread safe map.
// To avoid lock bottlenecks this map is dived to several (SHARD_COUNT) map shards.
var (
	SHARD_COUNTConcurrentMap = 32
)

// template type ConcurrentMap(KType,VType,KeyHash)

type ConcurrentMap []*shardedConcurrentMap

type shardedConcurrentMap struct {
	items map[string]interface{}
	sync.RWMutex
}

// Used by the Iter & IterBuffered functions to wrap two variables together over a channel,
type TupleConcurrentMap struct {
	Key string
	Val interface{}
}

func NewConcurrentMap() ConcurrentMap {
	this := make(ConcurrentMap, SHARD_COUNTConcurrentMap)
	for i := 0; i < SHARD_COUNTConcurrentMap; i++ {
		this[i] = &shardedConcurrentMap{items: make(map[string]interface{})}
	}
	return this
}

// Returns shard under given key.
func (m ConcurrentMap) GetShard(key string) *shardedConcurrentMap {
	return m[uint64(KeyHashStr(key))%uint64(SHARD_COUNTConcurrentMap)]
}

// IsEmpty checks if map is empty.
func (m ConcurrentMap) IsEmpty() bool {
	return m.Count() == 0
}

func (m *ConcurrentMap) Set(key string, value interface{}) {
	shard := m.GetShard(key)
	shard.Lock()
	shard.items[key] = value
	shard.Unlock()
}

// get all keys
func (m ConcurrentMap) Keys() []string {
	var ret []string
	for _, shard := range m {
		shard.RLock()
		for key := range shard.items {
			ret = append(ret, key)
		}
		shard.RUnlock()
	}
	return ret
}

// multiple get by keys
func (m ConcurrentMap) MGet(keys ...string) map[string]interface{} {
	data := make(map[string]interface{})
	for _, key := range keys {
		if val, ok := m.Get(key); ok {
			data[key] = val
		}
	}
	return data
}

// get all values
func (m ConcurrentMap) GetAll() map[string]interface{} {
	data := make(map[string]interface{})

	for _, shard := range m {
		shard.RLock()
		for key, val := range shard.items {
			data[key] = val
		}
		shard.RUnlock()
	}
	return data
}

// clear all values
func (m ConcurrentMap) Clear() {
	for _, shard := range m {
		shard.Lock()
		shard.items = make(map[string]interface{})
		shard.Unlock()
	}
}

// multiple set
func (m *ConcurrentMap) MSet(data map[string]interface{}) {
	for key, value := range data {
		m.Set(key, value)
	}
}

// like redis SETNX
// return true if the key was set
// return false if the key was not set
func (m *ConcurrentMap) SetNX(key string, value interface{}) bool {
	shard := m.GetShard(key)
	shard.Lock()
	_, ok := shard.items[key]
	if !ok {
		shard.items[key] = value
	}
	shard.Unlock()
	return true
}

func (m ConcurrentMap) Get(key string) (interface{}, bool) {
	shard := m.GetShard(key)
	shard.RLock()
	val, ok := shard.items[key]
	shard.RUnlock()
	return val, ok
}

func (m ConcurrentMap) Count() int {
	count := 0
	for i := 0; i < SHARD_COUNTConcurrentMap; i++ {
		shard := m[i]
		shard.RLock()
		count += len(shard.items)
		shard.RUnlock()
	}
	return count
}

func (m *ConcurrentMap) Has(key string) bool {
	shard := m.GetShard(key)
	shard.RLock()
	_, ok := shard.items[key]
	shard.RUnlock()
	return ok
}

func (m *ConcurrentMap) Remove(key string) {
	shard := m.GetShard(key)
	shard.Lock()
	delete(shard.items, key)
	shard.Unlock()
}

func (m ConcurrentMap) GetAndRemove(key string) (interface{}, bool) {
	shard := m.GetShard(key)
	shard.Lock()
	val, ok := shard.items[key]
	delete(shard.items, key)
	shard.Unlock()
	return val, ok
}

// Returns an iterator which could be used in a for range loop.
func (m ConcurrentMap) Iter() <-chan TupleConcurrentMap {
	ch := make(chan TupleConcurrentMap)
	go func() {
		for _, shard := range m {
			shard.RLock()
			for key, val := range shard.items {
				ch <- TupleConcurrentMap{key, val}
			}
			shard.RUnlock()
		}
		close(ch)
	}()
	return ch
}

// Returns a buffered iterator which could be used in a for range loop.
func (m ConcurrentMap) IterBuffered() <-chan TupleConcurrentMap {
	ch := make(chan TupleConcurrentMap, m.Count())
	go func() {
		// Foreach shard.
		for _, shard := range m {
			// Foreach key, value pair.
			shard.RLock()
			for key, val := range shard.items {
				ch <- TupleConcurrentMap{key, val}
			}
			shard.RUnlock()
		}
		close(ch)
	}()
	return ch
}
